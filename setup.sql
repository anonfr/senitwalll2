-- 1. Create the profiles table
CREATE TABLE public.profiles (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  handle text NOT NULL UNIQUE,
  pfp_url text,
  twitter_url text,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- 2. Enable Row Level Security (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- 3. Create policies for RLS
-- Allow anyone to read all profiles
CREATE POLICY "Allow public read access" ON public.profiles
  FOR SELECT USING (true);

-- Allow anyone to insert a new profile
CREATE POLICY "Allow public insert access" ON public.profiles
  FOR INSERT WITH CHECK (true);

-- Allow users to update their own profile (optional, good practice)
-- This example assumes you have user authentication set up.
-- If not, you might want a more restrictive update policy or handle updates via a secure backend function.
-- For this project, we can allow updates based on a secret or other logic if needed, but for now, we'll keep it simple.
-- The submit logic uses upsert, which requires update permissions.
CREATE POLICY "Allow public update access" ON public.profiles
  FOR UPDATE USING (true) WITH CHECK (true);
